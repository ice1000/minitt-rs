// Lexical rules
WHITESPACE = _{ " " | "\t" | NEWLINE | ("--" ~ (!NEWLINE ~ ANY)*) }

// Primitive helpers
character =
 _{ ASCII_ALPHA
  | "_"
  | "\'"
  | "\\"
  | '0'..'9'
  }
identifier_simple =
 @{ !"let"
  ~ !"rec"
  ~ !"fun"
  ~ !"sum"
  ~ !"\\lambda"
  ~ !"\\Sigma"
  ~ !"\\Pi"
  ~ !"0"
  ~ !"1"
  ~ !"_"
  ~ character+
  }
identifier_raw =
 @{ ("fun" ~ character+)
  | ("sum" ~ character+)
  | ("let" ~ character+)
  | ("rec" ~ character+)
  | ("0" ~ character+)
  | ("1" ~ character+)
  | ("_" ~ character+)
  }
identifier = { identifier_simple | identifier_raw }
constructor_name = @{ ASCII_ALPHA_UPPER ~ identifier? }
pi = _{ "Π" | "\\Pi" }
sigma = _{ "Σ" | "\\Sigma" }
lambda = _{ "λ" | "\\lambda" }
let_or_rec = { "let" | "rec" }
one = { "1" }
unit = { "0" }
universe = { "U" }
void = { EOI }
meta_var = { "_" }

// Patterns
atom_pattern = { identifier | meta_var | "(" ~ pattern ~ ")" }
pair_pattern = { atom_pattern ~ "," ~ pattern }
pattern = { pair_pattern | atom_pattern }

// Extracted helpers
typed_abstraction = _{ pattern ~ ":" ~ expression ~ "." ~ expression }
branches = _{ "(" ~ (constructor ~ ("|" ~ constructor)*)? ~ ")" }

// Atomic expressions
pi_type = { pi ~ typed_abstraction }
lambda_expression = { lambda ~ pattern ~ "." ~ expression }
constructor = { constructor_name ~ expression }
sigma_type = { sigma ~ typed_abstraction }
function = { "fun" ~ branches }
sum = { "sum" ~ branches }
variable = { identifier }
atom =
  { universe
  | constructor
  | variable
  | function
  | sum
  | one
  | unit
  | pi_type
  | sigma_type
  | lambda_expression
  | "(" ~ expression ~ ")"
  }

// Higher-level expressions
application = { atom ~ expression }
pair = { atom ~ "," ~ expression }
first = { atom ~ ".1" }
function_type = { atom ~ "->" ~ expression }
second = { atom ~ ".2" }
expression =
 { declaration
 | application
 | function_type
 | first
 | second
 | pair
 | atom
 | void
 }

// Declaration
declaration =
 { let_or_rec
 ~ pattern
 ~ ":" ~ expression
 ~ "=" ~ expression
 ~ ";" ~ expression
 }
