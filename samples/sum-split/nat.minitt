rec nat : U = sum { Zero | Suc nat };
-- Inductive definition of nat

let one : nat = Zero 0;

let two : nat = Suc one;

let test_case_split: nat -> U = split
 { Zero => 1
 | Suc  => 1
 };

let zero_anyway: \Pi n: nat. test_case_split n = split
 { Zero => 0
 | Suc  => 0
 };
-- Dependent function!

let pred: \Pi n: nat. nat = split
 { Zero => Zero
 | Suc n => n
 };
