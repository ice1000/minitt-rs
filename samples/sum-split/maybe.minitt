let maybe: U -> U = \lambda t. sum { Just t | Nothing 1 };

let the: \Pi t: U. (t -> t) = \lambda _. \lambda a. a;

let unwrap_type (t : U): (maybe t) -> U = split
  { Just _ => t
  | Nothing _ => 1
  };

-- let unwrap_bad: \Pi t: U. \Pi mt: maybe t. (unwrap_type t) mt = \lambda t.
--   the (\Pi mt: maybe t. (unwrap_type t) mt) split
--     { Just a => a
--     | Nothing _ => 0
--     };

-- The above definition won't work, because Mini-TT model is so stupid:
-- when it type-checks a declaration, it checks several hard-coded patterns of
-- well-typed expressions. When non of the rules matches, it tries to infer the
-- expression's type and compare with the signature.

-- And, as you can imagine, it cannot infer `split`'s type signature obviously.
-- Look at this cubicaltt-like replacement:

let unwrap (t : U): \Pi mt: maybe t. (unwrap_type t) mt = split
  -- I'm so sorry for the dumb parser, function application is accidentally
  -- right-associative.
  { Just a => a
  | Nothing _ => 0
  };
